
/*
* @author Phil
* @date Tue Dec 06 18:04:44 CET 2016
*/
package Sheavy.operations.environment.ActCoordinator.sfAddZone {
	import lu.uni.lassy.messir.libraries.calendar
	import lu.uni.lassy.messir.libraries.math
	import lu.uni.lassy.messir.libraries.primitives
	import lu.uni.lassy.messir.libraries.string
	import Sheavy.concepts.primarytypes.datatypes
	import Sheavy.concepts.primarytypes.classes
	import Sheavy.environment

	Operation Model {

		operation: actCoordinator.outactCoordinator.sfAddZone(AZone:ctZone):ptBoolean {
			preP {
				let TheSystem:ctState in
				let TheCoor:actCoordinator in
				self.rnActor.rnSystem = TheSystem and 				self.rnActor = TheCoor
				
				/*PreP01*/
				and TheCoordinator.rnctAuthenticated.vpIsLogged = true
				/*PreP02*/
				and TheSystem.vpCrisisLevel = 2

			}
			preF{let TheSystem:ctState in
				let TheCoor:actCoordinator in
				let AllZone: Bag(ctZone) in
				
				
				and TheSystem.rnctZone->select(id.eq(ZoneID))
      = ColctZones
  and ColctCoordinators->isEmpty() 
			}
			
			postF{
				let TheSystem:ctState in
				let TheCoor:actCoordinator in
				let AZone: ctZone in
				
				self.rnActor.rnSystem = TheSystem and 				self.rnActor = TheCoor
				
				/*PostF01*/
				and AZone.init(AZoneID, AZoneType, AHeight, AWidth, ALocation)
				
				/*PostF02*/
				and TheeCoor.rnInterfaceIN^ieMessage("Zone Added")
			}
		}

}
}